{"version":3,"sources":["components/TrainingForm/TrainingForm.jsx","components/TrainingList/Record/Record.jsx","components/TrainingList/TrainingList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TrainingForm","props","onAdd","className","onSubmit","e","preventDefault","target","date","value","dist","htmlFor","type","id","name","required","Record","data","onDel","onClick","TrainingList","records","onDelete","sorted","sort","a","b","dateFormat","onDelHandler","map","record","App","useState","setRecords","find","el","i","arr","Number","prevRecords","nanoid","Date","replace","length","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAEe,SAASA,EAAaC,GAAQ,IAClCC,EAAUD,EAAVC,MAQP,OACI,uBAAMC,UAAU,OAAOC,SARJ,SAACC,GACpBA,EAAEC,iBACFJ,EAAMG,EAAEE,OAAOC,KAAKC,MAAOJ,EAAEE,OAAOG,KAAKD,OACzCJ,EAAEE,OAAOC,KAAKC,MAAQ,GACtBJ,EAAEE,OAAOG,KAAKD,MAAQ,IAItB,UACI,sBAAKN,UAAU,aAAf,UACI,uBAAOA,UAAU,aAAaQ,QAAQ,OAAtC,+EACC,uBAAOC,KAAK,OAAOT,UAAU,aAAaU,GAAG,OAAOC,KAAK,OAAOC,UAAQ,OAG7E,sBAAKZ,UAAU,aAAf,UACI,uBAAOA,UAAU,aAAaQ,QAAQ,OAAtC,2EACC,uBAAOC,KAAK,SAAST,UAAU,aAAaU,GAAG,OAAOC,KAAK,OAAOC,UAAQ,OAE/E,wBAAQZ,UAAU,YAAlB,mB,MCpBG,SAASa,EAAOf,GAAQ,IAE5BgB,EAA2BhB,EAA3BgB,KAAMC,EAAqBjB,EAArBiB,MAUb,OACI,sBAAKf,UAAU,SAAf,UACY,sBAAMA,UAAU,cAAhB,SAA+Bc,EAAKT,OACpC,sBAAML,UAAU,cAAhB,SAA+Bc,EAAKP,OACpC,sBAAKP,UAAU,iBAAf,UACI,wBAAQA,UAAU,OAAlB,oBACA,wBAAQA,UAAU,SAASgB,QAd3B,WAChBD,EAAMD,EAAKJ,KAaK,0B,MCjBT,SAASO,EAAanB,GAAQ,IACjCoB,EAAsBpB,EAAtBoB,QAASC,EAAarB,EAAbqB,SACXC,EAASF,EAAQG,MAAK,SAACC,EAAGC,GAAJ,OAAWA,EAAEC,WAAaF,EAAEE,cAClDC,EAAe,SAACf,GAClBS,EAAST,IAGb,OACI,sBAAKV,UAAU,OAAf,UACI,sBAAKA,UAAU,cAAf,UACI,qGACA,iGACA,uFAEJ,qBAAKA,UAAU,aAAf,SACKoB,EAAOM,KAAI,SAAAC,GAAM,OAAI,cAAC,EAAD,CAAwBb,KAAMa,EAAQZ,MAAOU,GAAhCE,EAAOjB,Y,WCoB3CkB,MAhCf,WAAgB,IAAD,EACiBC,mBAAS,IAD1B,mBACNX,EADM,KACGY,EADH,KAwBb,OACE,sBAAK9B,UAAU,MAAf,UACC,cAAC,EAAD,CAAcD,MAxBG,SAACM,EAAKE,GACrBW,EAAQa,MAAK,SAACC,EAAIC,EAAGC,GACtB,OAAGF,EAAG3B,OAAOA,IAEX6B,EAAID,GAAG1B,KAAO4B,OAAQD,EAAID,GAAG1B,MAAQ4B,OAAO5B,IACrC,MAKTuB,GAAW,SAAAM,GAAW,mBAAQA,MAI9BN,GAAW,SAAAM,GAAW,4BAAQA,GAAR,CAAqB,CAAC1B,GAAI2B,cAAUhC,KAAMA,EAAOE,KAAMA,EAAMiB,WAAY,IAAIc,KAAKjC,EAAKkC,QAAQ,oBAAqB,sBAW1IrB,EAAQsB,OAAO,EAAI,cAAC,EAAD,CAAgBtB,QAASA,EAASC,SAPjC,SAACT,GACrBoB,GAAW,SAAAM,GAAW,OAAIA,EAAYK,QAAO,SAAAd,GAAM,OAAIA,EAAOjB,KAAOA,WAMgB,SCrB5EgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.589a9094.chunk.js","sourcesContent":["import './TrainingForm.css';\n\nexport default function TrainingForm(props) {\n   const { onAdd } = props;\n   const onSubmitHandler = (e) => {\n        e.preventDefault();\n        onAdd(e.target.date.value, e.target.dist.value);\n        e.target.date.value = '';\n        e.target.dist.value = '';\n    }\n\n    return(\n        <form className=\"Form\" onSubmit={onSubmitHandler}>\n            <div className=\"Date-Block\">\n                <label className=\"Data-Label\" htmlFor=\"date\">Дата (ДД.ММ.ГГ)</label>   \n                 <input type=\"date\" className=\"Date-Input\" id=\"date\" name=\"date\" required></input>\n\n            </div>\n            <div className=\"Dist-Block\">\n                <label className=\"Dist-Label\" htmlFor=\"dist\">Пройдено км</label>\n                 <input type=\"number\" className=\"Dist-Input\" id=\"dist\" name=\"dist\" required></input>\n            </div>\n            <button className=\"Ok-Button\">Ok</button>\n        </form>\n    )\n}","import './Record.css'\n\nexport default function Record(props) {\n\n    const {data, onDel/*, onEdit*/} = props;\n\n    const onDelRecord = () => {\n        onDel(data.id);\n    }\n\n    // const onEditRecord = () => {\n    //     onEdit(data.date, data.dist);\n    // }\n\n    return(\n        <div className=\"Record\">  \n                    <span className=\"Widget-Date\">{data.date}</span>\n                    <span className=\"Widget-Dist\">{data.dist}</span>\n                    <div className=\"Widget-Actions\">\n                        <button className=\"Edit\" /*onClick={onEditRecord}*/>✎</button>\n                        <button className=\"Delete\" onClick={onDelRecord}>✘</button>\n                    </div>\n                </div>\n    )\n}","import Record from './Record/Record';\nimport './TrainingList.css';\n\nexport default function TrainingList(props) {\n    const { records, onDelete } = props;\n    const sorted = records.sort((a, b) =>  b.dateFormat - a.dateFormat);\n    const onDelHandler = (id) => {\n        onDelete(id);\n    }\n\n    return(\n        <div className=\"List\">        \n            <div className=\"List-Header\">\n                <span>Дата (ДД.ММ.ГГ)</span>\n                <span>Пройдено км</span>\n                <span>Действия</span>\n            </div>\n            <div className=\"List-Table\">\n                {sorted.map(record => <Record key={record.id} data={record} onDel={onDelHandler} />)}             \n            </div>\n        </div>\n    )\n}","import { useState } from 'react';\nimport './App.css';\nimport TrainingForm from './components/TrainingForm/TrainingForm';\nimport TrainingWidget from './components/TrainingList/TrainingList';\nimport { nanoid } from 'nanoid';\n\nfunction App() {\n  const [records, setRecords] = useState([]);\n  const onAddRecord = (date,dist) => {\n    if(records.find((el, i, arr) => {\n      if(el.date===date)\n      {\n        arr[i].dist = Number( arr[i].dist) + Number(dist);\n        return true\n      }\n      else return false;\n    }))\n    {\n      setRecords(prevRecords => [...prevRecords]); \n    }\n    else\n    {\n      setRecords(prevRecords => [...prevRecords, {id: nanoid(), date: date,  dist: dist, dateFormat: new Date(date.replace(/(\\d+).(\\d+).(\\d+)/, '$3/$2/$1'))}]); \n    }\n   }\n\n  const onDeleteHandler = (id) => {\n      setRecords(prevRecords => prevRecords.filter(record => record.id !== id )); \n  }\n  \n  return (\n    <div className=\"App\">\n     <TrainingForm onAdd={onAddRecord} />\n     {records.length>0 ? <TrainingWidget records={records} onDelete={onDeleteHandler} /> : null }\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}